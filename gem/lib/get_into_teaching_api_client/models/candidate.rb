=begin
#Get into Teaching API - V1

#  Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module GetIntoTeachingApiClient
  class Candidate
    attr_accessor :preferred_teaching_subject_id

    attr_accessor :country_id

    attr_accessor :preferred_education_phase_id

    attr_accessor :initial_teacher_training_year_id

    attr_accessor :channel_id

    attr_accessor :has_gcse_english_id

    attr_accessor :has_gcse_maths_id

    attr_accessor :has_gcse_science_id

    attr_accessor :planning_to_retake_gcse_english_id

    attr_accessor :planning_to_retake_gcse_maths_id

    attr_accessor :planning_to_retake_cgse_science_id

    attr_accessor :describe_yourself_option_id

    attr_accessor :consideration_journey_stage_id

    attr_accessor :type_id

    attr_accessor :status_id

    attr_accessor :adviser_eligibility_id

    attr_accessor :adviser_requiremnt_id

    attr_accessor :email

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :date_of_birth

    attr_accessor :telephone

    attr_accessor :address_line1

    attr_accessor :address_line2

    attr_accessor :address_line3

    attr_accessor :address_city

    attr_accessor :address_state

    attr_accessor :address_postcode

    attr_accessor :callback_information

    attr_accessor :teacher_id

    attr_accessor :eligibility_rules_passed

    attr_accessor :do_not_bulk_email

    attr_accessor :do_not_bulk_postal_mail

    attr_accessor :do_not_email

    attr_accessor :do_not_postal_mail

    attr_accessor :do_not_send_mm

    attr_accessor :opt_out_of_sms

    attr_accessor :qualifications

    attr_accessor :past_teaching_positions

    attr_accessor :phone_call

    attr_accessor :privacy_policy

    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'preferred_teaching_subject_id' => :'preferredTeachingSubjectId',
        :'country_id' => :'countryId',
        :'preferred_education_phase_id' => :'preferredEducationPhaseId',
        :'initial_teacher_training_year_id' => :'initialTeacherTrainingYearId',
        :'channel_id' => :'channelId',
        :'has_gcse_english_id' => :'hasGcseEnglishId',
        :'has_gcse_maths_id' => :'hasGcseMathsId',
        :'has_gcse_science_id' => :'hasGcseScienceId',
        :'planning_to_retake_gcse_english_id' => :'planningToRetakeGcseEnglishId',
        :'planning_to_retake_gcse_maths_id' => :'planningToRetakeGcseMathsId',
        :'planning_to_retake_cgse_science_id' => :'planningToRetakeCgseScienceId',
        :'describe_yourself_option_id' => :'describeYourselfOptionId',
        :'consideration_journey_stage_id' => :'considerationJourneyStageId',
        :'type_id' => :'typeId',
        :'status_id' => :'statusId',
        :'adviser_eligibility_id' => :'adviserEligibilityId',
        :'adviser_requiremnt_id' => :'adviserRequiremntId',
        :'email' => :'email',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'date_of_birth' => :'dateOfBirth',
        :'telephone' => :'telephone',
        :'address_line1' => :'addressLine1',
        :'address_line2' => :'addressLine2',
        :'address_line3' => :'addressLine3',
        :'address_city' => :'addressCity',
        :'address_state' => :'addressState',
        :'address_postcode' => :'addressPostcode',
        :'callback_information' => :'callbackInformation',
        :'teacher_id' => :'teacherId',
        :'eligibility_rules_passed' => :'eligibilityRulesPassed',
        :'do_not_bulk_email' => :'doNotBulkEmail',
        :'do_not_bulk_postal_mail' => :'doNotBulkPostalMail',
        :'do_not_email' => :'doNotEmail',
        :'do_not_postal_mail' => :'doNotPostalMail',
        :'do_not_send_mm' => :'doNotSendMm',
        :'opt_out_of_sms' => :'optOutOfSms',
        :'qualifications' => :'qualifications',
        :'past_teaching_positions' => :'pastTeachingPositions',
        :'phone_call' => :'phoneCall',
        :'privacy_policy' => :'privacyPolicy',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'preferred_teaching_subject_id' => :'String',
        :'country_id' => :'String',
        :'preferred_education_phase_id' => :'Integer',
        :'initial_teacher_training_year_id' => :'Integer',
        :'channel_id' => :'Integer',
        :'has_gcse_english_id' => :'Integer',
        :'has_gcse_maths_id' => :'Integer',
        :'has_gcse_science_id' => :'Integer',
        :'planning_to_retake_gcse_english_id' => :'Integer',
        :'planning_to_retake_gcse_maths_id' => :'Integer',
        :'planning_to_retake_cgse_science_id' => :'Integer',
        :'describe_yourself_option_id' => :'Integer',
        :'consideration_journey_stage_id' => :'Integer',
        :'type_id' => :'Integer',
        :'status_id' => :'Integer',
        :'adviser_eligibility_id' => :'Integer',
        :'adviser_requiremnt_id' => :'Integer',
        :'email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'date_of_birth' => :'DateTime',
        :'telephone' => :'String',
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'address_line3' => :'String',
        :'address_city' => :'String',
        :'address_state' => :'String',
        :'address_postcode' => :'String',
        :'callback_information' => :'String',
        :'teacher_id' => :'String',
        :'eligibility_rules_passed' => :'String',
        :'do_not_bulk_email' => :'BOOLEAN',
        :'do_not_bulk_postal_mail' => :'BOOLEAN',
        :'do_not_email' => :'BOOLEAN',
        :'do_not_postal_mail' => :'BOOLEAN',
        :'do_not_send_mm' => :'BOOLEAN',
        :'opt_out_of_sms' => :'BOOLEAN',
        :'qualifications' => :'Array<CandidateQualification>',
        :'past_teaching_positions' => :'Array<CandidatePastTeachingPosition>',
        :'phone_call' => :'PhoneCall',
        :'privacy_policy' => :'CandidatePrivacyPolicy',
        :'id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'preferredTeachingSubjectId')
        self.preferred_teaching_subject_id = attributes[:'preferredTeachingSubjectId']
      end

      if attributes.has_key?(:'countryId')
        self.country_id = attributes[:'countryId']
      end

      if attributes.has_key?(:'preferredEducationPhaseId')
        self.preferred_education_phase_id = attributes[:'preferredEducationPhaseId']
      end

      if attributes.has_key?(:'initialTeacherTrainingYearId')
        self.initial_teacher_training_year_id = attributes[:'initialTeacherTrainingYearId']
      end

      if attributes.has_key?(:'channelId')
        self.channel_id = attributes[:'channelId']
      end

      if attributes.has_key?(:'hasGcseEnglishId')
        self.has_gcse_english_id = attributes[:'hasGcseEnglishId']
      end

      if attributes.has_key?(:'hasGcseMathsId')
        self.has_gcse_maths_id = attributes[:'hasGcseMathsId']
      end

      if attributes.has_key?(:'hasGcseScienceId')
        self.has_gcse_science_id = attributes[:'hasGcseScienceId']
      end

      if attributes.has_key?(:'planningToRetakeGcseEnglishId')
        self.planning_to_retake_gcse_english_id = attributes[:'planningToRetakeGcseEnglishId']
      end

      if attributes.has_key?(:'planningToRetakeGcseMathsId')
        self.planning_to_retake_gcse_maths_id = attributes[:'planningToRetakeGcseMathsId']
      end

      if attributes.has_key?(:'planningToRetakeCgseScienceId')
        self.planning_to_retake_cgse_science_id = attributes[:'planningToRetakeCgseScienceId']
      end

      if attributes.has_key?(:'describeYourselfOptionId')
        self.describe_yourself_option_id = attributes[:'describeYourselfOptionId']
      end

      if attributes.has_key?(:'considerationJourneyStageId')
        self.consideration_journey_stage_id = attributes[:'considerationJourneyStageId']
      end

      if attributes.has_key?(:'typeId')
        self.type_id = attributes[:'typeId']
      end

      if attributes.has_key?(:'statusId')
        self.status_id = attributes[:'statusId']
      end

      if attributes.has_key?(:'adviserEligibilityId')
        self.adviser_eligibility_id = attributes[:'adviserEligibilityId']
      end

      if attributes.has_key?(:'adviserRequiremntId')
        self.adviser_requiremnt_id = attributes[:'adviserRequiremntId']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'dateOfBirth')
        self.date_of_birth = attributes[:'dateOfBirth']
      end

      if attributes.has_key?(:'telephone')
        self.telephone = attributes[:'telephone']
      end

      if attributes.has_key?(:'addressLine1')
        self.address_line1 = attributes[:'addressLine1']
      end

      if attributes.has_key?(:'addressLine2')
        self.address_line2 = attributes[:'addressLine2']
      end

      if attributes.has_key?(:'addressLine3')
        self.address_line3 = attributes[:'addressLine3']
      end

      if attributes.has_key?(:'addressCity')
        self.address_city = attributes[:'addressCity']
      end

      if attributes.has_key?(:'addressState')
        self.address_state = attributes[:'addressState']
      end

      if attributes.has_key?(:'addressPostcode')
        self.address_postcode = attributes[:'addressPostcode']
      end

      if attributes.has_key?(:'callbackInformation')
        self.callback_information = attributes[:'callbackInformation']
      end

      if attributes.has_key?(:'teacherId')
        self.teacher_id = attributes[:'teacherId']
      end

      if attributes.has_key?(:'eligibilityRulesPassed')
        self.eligibility_rules_passed = attributes[:'eligibilityRulesPassed']
      end

      if attributes.has_key?(:'doNotBulkEmail')
        self.do_not_bulk_email = attributes[:'doNotBulkEmail']
      end

      if attributes.has_key?(:'doNotBulkPostalMail')
        self.do_not_bulk_postal_mail = attributes[:'doNotBulkPostalMail']
      end

      if attributes.has_key?(:'doNotEmail')
        self.do_not_email = attributes[:'doNotEmail']
      end

      if attributes.has_key?(:'doNotPostalMail')
        self.do_not_postal_mail = attributes[:'doNotPostalMail']
      end

      if attributes.has_key?(:'doNotSendMm')
        self.do_not_send_mm = attributes[:'doNotSendMm']
      end

      if attributes.has_key?(:'optOutOfSms')
        self.opt_out_of_sms = attributes[:'optOutOfSms']
      end

      if attributes.has_key?(:'qualifications')
        if (value = attributes[:'qualifications']).is_a?(Array)
          self.qualifications = value
        end
      end

      if attributes.has_key?(:'pastTeachingPositions')
        if (value = attributes[:'pastTeachingPositions']).is_a?(Array)
          self.past_teaching_positions = value
        end
      end

      if attributes.has_key?(:'phoneCall')
        self.phone_call = attributes[:'phoneCall']
      end

      if attributes.has_key?(:'privacyPolicy')
        self.privacy_policy = attributes[:'privacyPolicy']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email.to_s.length > 100
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 100.')
      end

      if @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @first_name.to_s.length > 256
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 256.')
      end

      if @first_name.to_s.length < 1
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 1.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @last_name.to_s.length > 256
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 256.')
      end

      if @last_name.to_s.length < 1
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 1.')
      end

      if @date_of_birth.nil?
        invalid_properties.push('invalid value for "date_of_birth", date_of_birth cannot be nil.')
      end

      if @telephone.nil?
        invalid_properties.push('invalid value for "telephone", telephone cannot be nil.')
      end

      if @telephone.to_s.length > 50
        invalid_properties.push('invalid value for "telephone", the character length must be smaller than or equal to 50.')
      end

      if @telephone.to_s.length < 1
        invalid_properties.push('invalid value for "telephone", the character length must be great than or equal to 1.')
      end

      if @address_line1.nil?
        invalid_properties.push('invalid value for "address_line1", address_line1 cannot be nil.')
      end

      if @address_line1.to_s.length > 1024
        invalid_properties.push('invalid value for "address_line1", the character length must be smaller than or equal to 1024.')
      end

      if @address_line1.to_s.length < 1
        invalid_properties.push('invalid value for "address_line1", the character length must be great than or equal to 1.')
      end

      if !@address_line2.nil? && @address_line2.to_s.length > 1024
        invalid_properties.push('invalid value for "address_line2", the character length must be smaller than or equal to 1024.')
      end

      if !@address_line2.nil? && @address_line2.to_s.length < 0
        invalid_properties.push('invalid value for "address_line2", the character length must be great than or equal to 0.')
      end

      if !@address_line3.nil? && @address_line3.to_s.length > 1024
        invalid_properties.push('invalid value for "address_line3", the character length must be smaller than or equal to 1024.')
      end

      if !@address_line3.nil? && @address_line3.to_s.length < 0
        invalid_properties.push('invalid value for "address_line3", the character length must be great than or equal to 0.')
      end

      if @address_city.nil?
        invalid_properties.push('invalid value for "address_city", address_city cannot be nil.')
      end

      if @address_city.to_s.length > 128
        invalid_properties.push('invalid value for "address_city", the character length must be smaller than or equal to 128.')
      end

      if @address_city.to_s.length < 1
        invalid_properties.push('invalid value for "address_city", the character length must be great than or equal to 1.')
      end

      if @address_state.nil?
        invalid_properties.push('invalid value for "address_state", address_state cannot be nil.')
      end

      if @address_state.to_s.length > 128
        invalid_properties.push('invalid value for "address_state", the character length must be smaller than or equal to 128.')
      end

      if @address_state.to_s.length < 1
        invalid_properties.push('invalid value for "address_state", the character length must be great than or equal to 1.')
      end

      if @address_postcode.nil?
        invalid_properties.push('invalid value for "address_postcode", address_postcode cannot be nil.')
      end

      if @address_postcode.to_s.length > 40
        invalid_properties.push('invalid value for "address_postcode", the character length must be smaller than or equal to 40.')
      end

      if @address_postcode.to_s.length < 1
        invalid_properties.push('invalid value for "address_postcode", the character length must be great than or equal to 1.')
      end

      if !@callback_information.nil? && @callback_information.to_s.length > 600
        invalid_properties.push('invalid value for "callback_information", the character length must be smaller than or equal to 600.')
      end

      if !@callback_information.nil? && @callback_information.to_s.length < 0
        invalid_properties.push('invalid value for "callback_information", the character length must be great than or equal to 0.')
      end

      if @privacy_policy.nil?
        invalid_properties.push('invalid value for "privacy_policy", privacy_policy cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @email.nil?
      return false if @email.to_s.length > 100
      return false if @email.to_s.length < 1
      return false if @first_name.nil?
      return false if @first_name.to_s.length > 256
      return false if @first_name.to_s.length < 1
      return false if @last_name.nil?
      return false if @last_name.to_s.length > 256
      return false if @last_name.to_s.length < 1
      return false if @date_of_birth.nil?
      return false if @telephone.nil?
      return false if @telephone.to_s.length > 50
      return false if @telephone.to_s.length < 1
      return false if @address_line1.nil?
      return false if @address_line1.to_s.length > 1024
      return false if @address_line1.to_s.length < 1
      return false if !@address_line2.nil? && @address_line2.to_s.length > 1024
      return false if !@address_line2.nil? && @address_line2.to_s.length < 0
      return false if !@address_line3.nil? && @address_line3.to_s.length > 1024
      return false if !@address_line3.nil? && @address_line3.to_s.length < 0
      return false if @address_city.nil?
      return false if @address_city.to_s.length > 128
      return false if @address_city.to_s.length < 1
      return false if @address_state.nil?
      return false if @address_state.to_s.length > 128
      return false if @address_state.to_s.length < 1
      return false if @address_postcode.nil?
      return false if @address_postcode.to_s.length > 40
      return false if @address_postcode.to_s.length < 1
      return false if !@callback_information.nil? && @callback_information.to_s.length > 600
      return false if !@callback_information.nil? && @callback_information.to_s.length < 0
      return false if @privacy_policy.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 100
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 100.'
      end

      if email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 256.'
      end

      if first_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 1.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 256.'
      end

      if last_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 1.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] telephone Value to be assigned
    def telephone=(telephone)
      if telephone.nil?
        fail ArgumentError, 'telephone cannot be nil'
      end

      if telephone.to_s.length > 50
        fail ArgumentError, 'invalid value for "telephone", the character length must be smaller than or equal to 50.'
      end

      if telephone.to_s.length < 1
        fail ArgumentError, 'invalid value for "telephone", the character length must be great than or equal to 1.'
      end

      @telephone = telephone
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line1 Value to be assigned
    def address_line1=(address_line1)
      if address_line1.nil?
        fail ArgumentError, 'address_line1 cannot be nil'
      end

      if address_line1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address_line1", the character length must be smaller than or equal to 1024.'
      end

      if address_line1.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_line1", the character length must be great than or equal to 1.'
      end

      @address_line1 = address_line1
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line2 Value to be assigned
    def address_line2=(address_line2)
      if !address_line2.nil? && address_line2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address_line2", the character length must be smaller than or equal to 1024.'
      end

      if !address_line2.nil? && address_line2.to_s.length < 0
        fail ArgumentError, 'invalid value for "address_line2", the character length must be great than or equal to 0.'
      end

      @address_line2 = address_line2
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line3 Value to be assigned
    def address_line3=(address_line3)
      if !address_line3.nil? && address_line3.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address_line3", the character length must be smaller than or equal to 1024.'
      end

      if !address_line3.nil? && address_line3.to_s.length < 0
        fail ArgumentError, 'invalid value for "address_line3", the character length must be great than or equal to 0.'
      end

      @address_line3 = address_line3
    end

    # Custom attribute writer method with validation
    # @param [Object] address_city Value to be assigned
    def address_city=(address_city)
      if address_city.nil?
        fail ArgumentError, 'address_city cannot be nil'
      end

      if address_city.to_s.length > 128
        fail ArgumentError, 'invalid value for "address_city", the character length must be smaller than or equal to 128.'
      end

      if address_city.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_city", the character length must be great than or equal to 1.'
      end

      @address_city = address_city
    end

    # Custom attribute writer method with validation
    # @param [Object] address_state Value to be assigned
    def address_state=(address_state)
      if address_state.nil?
        fail ArgumentError, 'address_state cannot be nil'
      end

      if address_state.to_s.length > 128
        fail ArgumentError, 'invalid value for "address_state", the character length must be smaller than or equal to 128.'
      end

      if address_state.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_state", the character length must be great than or equal to 1.'
      end

      @address_state = address_state
    end

    # Custom attribute writer method with validation
    # @param [Object] address_postcode Value to be assigned
    def address_postcode=(address_postcode)
      if address_postcode.nil?
        fail ArgumentError, 'address_postcode cannot be nil'
      end

      if address_postcode.to_s.length > 40
        fail ArgumentError, 'invalid value for "address_postcode", the character length must be smaller than or equal to 40.'
      end

      if address_postcode.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_postcode", the character length must be great than or equal to 1.'
      end

      @address_postcode = address_postcode
    end

    # Custom attribute writer method with validation
    # @param [Object] callback_information Value to be assigned
    def callback_information=(callback_information)
      if !callback_information.nil? && callback_information.to_s.length > 600
        fail ArgumentError, 'invalid value for "callback_information", the character length must be smaller than or equal to 600.'
      end

      if !callback_information.nil? && callback_information.to_s.length < 0
        fail ArgumentError, 'invalid value for "callback_information", the character length must be great than or equal to 0.'
      end

      @callback_information = callback_information
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          preferred_teaching_subject_id == o.preferred_teaching_subject_id &&
          country_id == o.country_id &&
          preferred_education_phase_id == o.preferred_education_phase_id &&
          initial_teacher_training_year_id == o.initial_teacher_training_year_id &&
          channel_id == o.channel_id &&
          has_gcse_english_id == o.has_gcse_english_id &&
          has_gcse_maths_id == o.has_gcse_maths_id &&
          has_gcse_science_id == o.has_gcse_science_id &&
          planning_to_retake_gcse_english_id == o.planning_to_retake_gcse_english_id &&
          planning_to_retake_gcse_maths_id == o.planning_to_retake_gcse_maths_id &&
          planning_to_retake_cgse_science_id == o.planning_to_retake_cgse_science_id &&
          describe_yourself_option_id == o.describe_yourself_option_id &&
          consideration_journey_stage_id == o.consideration_journey_stage_id &&
          type_id == o.type_id &&
          status_id == o.status_id &&
          adviser_eligibility_id == o.adviser_eligibility_id &&
          adviser_requiremnt_id == o.adviser_requiremnt_id &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          date_of_birth == o.date_of_birth &&
          telephone == o.telephone &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          address_line3 == o.address_line3 &&
          address_city == o.address_city &&
          address_state == o.address_state &&
          address_postcode == o.address_postcode &&
          callback_information == o.callback_information &&
          teacher_id == o.teacher_id &&
          eligibility_rules_passed == o.eligibility_rules_passed &&
          do_not_bulk_email == o.do_not_bulk_email &&
          do_not_bulk_postal_mail == o.do_not_bulk_postal_mail &&
          do_not_email == o.do_not_email &&
          do_not_postal_mail == o.do_not_postal_mail &&
          do_not_send_mm == o.do_not_send_mm &&
          opt_out_of_sms == o.opt_out_of_sms &&
          qualifications == o.qualifications &&
          past_teaching_positions == o.past_teaching_positions &&
          phone_call == o.phone_call &&
          privacy_policy == o.privacy_policy &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [preferred_teaching_subject_id, country_id, preferred_education_phase_id, initial_teacher_training_year_id, channel_id, has_gcse_english_id, has_gcse_maths_id, has_gcse_science_id, planning_to_retake_gcse_english_id, planning_to_retake_gcse_maths_id, planning_to_retake_cgse_science_id, describe_yourself_option_id, consideration_journey_stage_id, type_id, status_id, adviser_eligibility_id, adviser_requiremnt_id, email, first_name, last_name, date_of_birth, telephone, address_line1, address_line2, address_line3, address_city, address_state, address_postcode, callback_information, teacher_id, eligibility_rules_passed, do_not_bulk_email, do_not_bulk_postal_mail, do_not_email, do_not_postal_mail, do_not_send_mm, opt_out_of_sms, qualifications, past_teaching_positions, phone_call, privacy_policy, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = GetIntoTeachingApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
