=begin
#Get into Teaching API - V1

#                              Provides a RESTful API for integrating with the Get into Teaching CRM.                              The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).                              The GIT API aims to provide:                              * Simple, task-based RESTful APIs.                              * Message queueing (while the GIT CRM is offline for updates).                              * Validation to ensure consistency across services writing to the GIT CRM.                          

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module GetIntoTeachingApiClient
  class TeachingEventAddAttendee
    attr_accessor :candidate_id

    attr_accessor :qualification_id

    attr_accessor :event_id

    attr_accessor :channel_id

    attr_accessor :accepted_policy_id

    attr_accessor :preferred_teaching_subject_id

    attr_accessor :consideration_journey_stage_id

    attr_accessor :degree_status_id

    attr_accessor :email

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :address_postcode

    attr_accessor :address_telephone

    attr_accessor :is_verified

    attr_accessor :is_walk_in

    attr_accessor :subscribe_to_mailing_list

    attr_accessor :already_subscribed_to_events

    attr_accessor :already_subscribed_to_mailing_list

    attr_accessor :already_subscribed_to_teacher_training_adviser

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'candidate_id' => :'candidateId',
        :'qualification_id' => :'qualificationId',
        :'event_id' => :'eventId',
        :'channel_id' => :'channelId',
        :'accepted_policy_id' => :'acceptedPolicyId',
        :'preferred_teaching_subject_id' => :'preferredTeachingSubjectId',
        :'consideration_journey_stage_id' => :'considerationJourneyStageId',
        :'degree_status_id' => :'degreeStatusId',
        :'email' => :'email',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'address_postcode' => :'addressPostcode',
        :'address_telephone' => :'addressTelephone',
        :'is_verified' => :'isVerified',
        :'is_walk_in' => :'isWalkIn',
        :'subscribe_to_mailing_list' => :'subscribeToMailingList',
        :'already_subscribed_to_events' => :'alreadySubscribedToEvents',
        :'already_subscribed_to_mailing_list' => :'alreadySubscribedToMailingList',
        :'already_subscribed_to_teacher_training_adviser' => :'alreadySubscribedToTeacherTrainingAdviser'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'candidate_id' => :'String',
        :'qualification_id' => :'String',
        :'event_id' => :'String',
        :'channel_id' => :'Integer',
        :'accepted_policy_id' => :'String',
        :'preferred_teaching_subject_id' => :'String',
        :'consideration_journey_stage_id' => :'Integer',
        :'degree_status_id' => :'Integer',
        :'email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'address_postcode' => :'String',
        :'address_telephone' => :'String',
        :'is_verified' => :'Boolean',
        :'is_walk_in' => :'Boolean',
        :'subscribe_to_mailing_list' => :'Boolean',
        :'already_subscribed_to_events' => :'Boolean',
        :'already_subscribed_to_mailing_list' => :'Boolean',
        :'already_subscribed_to_teacher_training_adviser' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'candidate_id',
        :'qualification_id',
        :'channel_id',
        :'preferred_teaching_subject_id',
        :'consideration_journey_stage_id',
        :'degree_status_id',
        :'address_postcode',
        :'address_telephone',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GetIntoTeachingApiClient::TeachingEventAddAttendee` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GetIntoTeachingApiClient::TeachingEventAddAttendee`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'candidate_id')
        self.candidate_id = attributes[:'candidate_id']
      end

      if attributes.key?(:'qualification_id')
        self.qualification_id = attributes[:'qualification_id']
      end

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      end

      if attributes.key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.key?(:'accepted_policy_id')
        self.accepted_policy_id = attributes[:'accepted_policy_id']
      end

      if attributes.key?(:'preferred_teaching_subject_id')
        self.preferred_teaching_subject_id = attributes[:'preferred_teaching_subject_id']
      end

      if attributes.key?(:'consideration_journey_stage_id')
        self.consideration_journey_stage_id = attributes[:'consideration_journey_stage_id']
      end

      if attributes.key?(:'degree_status_id')
        self.degree_status_id = attributes[:'degree_status_id']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'address_postcode')
        self.address_postcode = attributes[:'address_postcode']
      end

      if attributes.key?(:'address_telephone')
        self.address_telephone = attributes[:'address_telephone']
      end

      if attributes.key?(:'is_verified')
        self.is_verified = attributes[:'is_verified']
      end

      if attributes.key?(:'is_walk_in')
        self.is_walk_in = attributes[:'is_walk_in']
      end

      if attributes.key?(:'subscribe_to_mailing_list')
        self.subscribe_to_mailing_list = attributes[:'subscribe_to_mailing_list']
      end

      if attributes.key?(:'already_subscribed_to_events')
        self.already_subscribed_to_events = attributes[:'already_subscribed_to_events']
      end

      if attributes.key?(:'already_subscribed_to_mailing_list')
        self.already_subscribed_to_mailing_list = attributes[:'already_subscribed_to_mailing_list']
      end

      if attributes.key?(:'already_subscribed_to_teacher_training_adviser')
        self.already_subscribed_to_teacher_training_adviser = attributes[:'already_subscribed_to_teacher_training_adviser']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @event_id.nil?
        invalid_properties.push('invalid value for "event_id", event_id cannot be nil.')
      end

      if @event_id.to_s.length < 1
        invalid_properties.push('invalid value for "event_id", the character length must be great than or equal to 1.')
      end

      if @accepted_policy_id.nil?
        invalid_properties.push('invalid value for "accepted_policy_id", accepted_policy_id cannot be nil.')
      end

      if @accepted_policy_id.to_s.length < 1
        invalid_properties.push('invalid value for "accepted_policy_id", the character length must be great than or equal to 1.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @first_name.to_s.length < 1
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 1.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @last_name.to_s.length < 1
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @event_id.nil?
      return false if @event_id.to_s.length < 1
      return false if @accepted_policy_id.nil?
      return false if @accepted_policy_id.to_s.length < 1
      return false if @email.nil?
      return false if @email.to_s.length < 1
      return false if @first_name.nil?
      return false if @first_name.to_s.length < 1
      return false if @last_name.nil?
      return false if @last_name.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] event_id Value to be assigned
    def event_id=(event_id)
      if event_id.nil?
        fail ArgumentError, 'event_id cannot be nil'
      end

      if event_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "event_id", the character length must be great than or equal to 1.'
      end

      @event_id = event_id
    end

    # Custom attribute writer method with validation
    # @param [Object] accepted_policy_id Value to be assigned
    def accepted_policy_id=(accepted_policy_id)
      if accepted_policy_id.nil?
        fail ArgumentError, 'accepted_policy_id cannot be nil'
      end

      if accepted_policy_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "accepted_policy_id", the character length must be great than or equal to 1.'
      end

      @accepted_policy_id = accepted_policy_id
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 1.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 1.'
      end

      @last_name = last_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          candidate_id == o.candidate_id &&
          qualification_id == o.qualification_id &&
          event_id == o.event_id &&
          channel_id == o.channel_id &&
          accepted_policy_id == o.accepted_policy_id &&
          preferred_teaching_subject_id == o.preferred_teaching_subject_id &&
          consideration_journey_stage_id == o.consideration_journey_stage_id &&
          degree_status_id == o.degree_status_id &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          address_postcode == o.address_postcode &&
          address_telephone == o.address_telephone &&
          is_verified == o.is_verified &&
          is_walk_in == o.is_walk_in &&
          subscribe_to_mailing_list == o.subscribe_to_mailing_list &&
          already_subscribed_to_events == o.already_subscribed_to_events &&
          already_subscribed_to_mailing_list == o.already_subscribed_to_mailing_list &&
          already_subscribed_to_teacher_training_adviser == o.already_subscribed_to_teacher_training_adviser
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [candidate_id, qualification_id, event_id, channel_id, accepted_policy_id, preferred_teaching_subject_id, consideration_journey_stage_id, degree_status_id, email, first_name, last_name, address_postcode, address_telephone, is_verified, is_walk_in, subscribe_to_mailing_list, already_subscribed_to_events, already_subscribed_to_mailing_list, already_subscribed_to_teacher_training_adviser].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GetIntoTeachingApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
