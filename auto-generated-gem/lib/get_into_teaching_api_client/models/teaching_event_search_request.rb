=begin
#Get into Teaching API - V1

#                             Provides a RESTful API for integrating with the Get into Teaching CRM.                             The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).                             The GIT API aims to provide:                             * Simple, task-based RESTful APIs.                             * Message queueing (while the GIT CRM is offline for updates).                             * Validation to ensure consistency across services writing to the GIT CRM.                         

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module GetIntoTeachingApiClient
  class TeachingEventSearchRequest
    # Postcode to center search around.
    attr_accessor :postcode

    # Set to filter results to a radius (in miles) around the postcode.
    attr_accessor :radius

    # Set to filter results to a type of teaching event. Each ID must match a `typeId` of the `TeachingEvent` schema.
    attr_accessor :type_ids

    # Set to true to return only online events and false to return only in-person events.
    attr_accessor :online

    # Set to filter results to those that start after a given date.
    attr_accessor :start_after

    # Set to filter results to those that start before a given date.
    attr_accessor :start_before

    # Set to filter results by event status.
    attr_accessor :status_ids

    # Set to filter results by accessibility options.
    attr_accessor :accessibility_options

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'postcode' => :'postcode',
        :'radius' => :'radius',
        :'type_ids' => :'typeIds',
        :'online' => :'online',
        :'start_after' => :'startAfter',
        :'start_before' => :'startBefore',
        :'status_ids' => :'statusIds',
        :'accessibility_options' => :'accessibilityOptions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'postcode' => :'String',
        :'radius' => :'Integer',
        :'type_ids' => :'Array<Integer>',
        :'online' => :'Boolean',
        :'start_after' => :'Time',
        :'start_before' => :'Time',
        :'status_ids' => :'Array<Integer>',
        :'accessibility_options' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'postcode',
        :'radius',
        :'type_ids',
        :'online',
        :'start_after',
        :'start_before',
        :'status_ids',
        :'accessibility_options'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GetIntoTeachingApiClient::TeachingEventSearchRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GetIntoTeachingApiClient::TeachingEventSearchRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.key?(:'radius')
        self.radius = attributes[:'radius']
      end

      if attributes.key?(:'type_ids')
        if (value = attributes[:'type_ids']).is_a?(Array)
          self.type_ids = value
        end
      end

      if attributes.key?(:'online')
        self.online = attributes[:'online']
      end

      if attributes.key?(:'start_after')
        self.start_after = attributes[:'start_after']
      end

      if attributes.key?(:'start_before')
        self.start_before = attributes[:'start_before']
      end

      if attributes.key?(:'status_ids')
        if (value = attributes[:'status_ids']).is_a?(Array)
          self.status_ids = value
        end
      end

      if attributes.key?(:'accessibility_options')
        if (value = attributes[:'accessibility_options']).is_a?(Array)
          self.accessibility_options = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@radius.nil? && @radius <= 0
        invalid_properties.push('invalid value for "radius", must be greater than 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@radius.nil? && @radius <= 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] radius Value to be assigned
    def radius=(radius)
      if !radius.nil? && radius <= 0
        fail ArgumentError, 'invalid value for "radius", must be greater than 0.'
      end

      @radius = radius
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          postcode == o.postcode &&
          radius == o.radius &&
          type_ids == o.type_ids &&
          online == o.online &&
          start_after == o.start_after &&
          start_before == o.start_before &&
          status_ids == o.status_ids &&
          accessibility_options == o.accessibility_options
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [postcode, radius, type_ids, online, start_after, start_before, status_ids, accessibility_options].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GetIntoTeachingApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
