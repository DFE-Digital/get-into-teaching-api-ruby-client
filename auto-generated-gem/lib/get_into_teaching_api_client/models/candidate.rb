=begin
#Get into Teaching API - V1

# Provides a RESTful API for integrating with the Get into Teaching CRM. The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events). The GIT API aims to provide: * Simple, task-based RESTful APIs. * Message queueing (while the GIT CRM is offline for updates). * Validation to ensure consistency across services writing to the GIT CRM.                         

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module GetIntoTeachingApiClient
  class Candidate
    attr_accessor :id

    attr_accessor :full_name

    attr_accessor :preferred_teaching_subject_id

    attr_accessor :secondary_preferred_teaching_subject_id

    attr_accessor :country_id

    attr_accessor :owning_business_unit_id

    attr_accessor :master_id

    attr_accessor :preferred_education_phase_id

    attr_accessor :initial_teacher_training_year_id

    attr_accessor :channel_id

    attr_accessor :has_gcse_english_id

    attr_accessor :has_gcse_maths_id

    attr_accessor :has_gcse_science_id

    attr_accessor :planning_to_retake_gcse_english_id

    attr_accessor :planning_to_retake_gcse_maths_id

    attr_accessor :planning_to_retake_gcse_science_id

    attr_accessor :consideration_journey_stage_id

    attr_accessor :type_id

    attr_accessor :assignment_status_id

    attr_accessor :adviser_eligibility_id

    attr_accessor :adviser_requirement_id

    attr_accessor :preferred_phone_number_type_id

    attr_accessor :preferred_contact_method_id

    attr_accessor :gdpr_consent_id

    attr_accessor :magic_link_token_status_id

    attr_accessor :status_is_waiting_to_be_assigned_at

    attr_accessor :merged

    attr_accessor :find_apply_id

    attr_accessor :email

    attr_accessor :secondary_email

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :date_of_birth

    attr_accessor :mobile_telephone

    attr_accessor :address_telephone

    attr_accessor :address_line1

    attr_accessor :address_line2

    attr_accessor :address_line3

    attr_accessor :address_city

    attr_accessor :address_state_or_province

    attr_accessor :address_postcode

    attr_accessor :telephone

    attr_accessor :secondary_telephone

    attr_accessor :has_dbs_certificate

    attr_accessor :dbs_certificate_issued_at

    attr_accessor :classroom_experience_notes_raw

    attr_accessor :teacher_id

    attr_accessor :eligibility_rules_passed

    attr_accessor :do_not_bulk_email

    attr_accessor :do_not_bulk_postal_mail

    attr_accessor :do_not_email

    attr_accessor :do_not_postal_mail

    attr_accessor :do_not_send_mm

    attr_accessor :opt_out_of_sms

    attr_accessor :opt_out_of_gdpr

    attr_accessor :is_new_registrant

    attr_accessor :magic_link_token

    attr_accessor :magic_link_token_expires_at

    attr_accessor :has_teacher_training_adviser_subscription

    attr_accessor :teacher_training_adviser_subscription_channel_id

    attr_accessor :teacher_training_adviser_subscription_start_at

    attr_accessor :teacher_training_adviser_subscription_do_not_bulk_email

    attr_accessor :teacher_training_adviser_subscription_do_not_bulk_postal_mail

    attr_accessor :teacher_training_adviser_subscription_do_not_email

    attr_accessor :teacher_training_adviser_subscription_do_not_postal_mail

    attr_accessor :teacher_training_adviser_subscription_do_not_send_mm

    attr_accessor :has_mailing_list_subscription

    attr_accessor :mailing_list_subscription_channel_id

    attr_accessor :mailing_list_subscription_start_at

    attr_accessor :mailing_list_subscription_do_not_bulk_email

    attr_accessor :mailing_list_subscription_do_not_bulk_postal_mail

    attr_accessor :mailing_list_subscription_do_not_email

    attr_accessor :mailing_list_subscription_do_not_postal_mail

    attr_accessor :mailing_list_subscription_do_not_send_mm

    attr_accessor :has_events_subscription

    attr_accessor :events_subscription_channel_id

    attr_accessor :events_subscription_type_id

    attr_accessor :events_subscription_start_at

    attr_accessor :events_subscription_do_not_bulk_email

    attr_accessor :events_subscription_do_not_bulk_postal_mail

    attr_accessor :events_subscription_do_not_email

    attr_accessor :events_subscription_do_not_postal_mail

    attr_accessor :events_subscription_do_not_send_mm

    attr_accessor :teaching_event_registrations

    attr_accessor :qualifications

    attr_accessor :past_teaching_positions

    attr_accessor :phone_call

    attr_accessor :privacy_policy

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'full_name' => :'fullName',
        :'preferred_teaching_subject_id' => :'preferredTeachingSubjectId',
        :'secondary_preferred_teaching_subject_id' => :'secondaryPreferredTeachingSubjectId',
        :'country_id' => :'countryId',
        :'owning_business_unit_id' => :'owningBusinessUnitId',
        :'master_id' => :'masterId',
        :'preferred_education_phase_id' => :'preferredEducationPhaseId',
        :'initial_teacher_training_year_id' => :'initialTeacherTrainingYearId',
        :'channel_id' => :'channelId',
        :'has_gcse_english_id' => :'hasGcseEnglishId',
        :'has_gcse_maths_id' => :'hasGcseMathsId',
        :'has_gcse_science_id' => :'hasGcseScienceId',
        :'planning_to_retake_gcse_english_id' => :'planningToRetakeGcseEnglishId',
        :'planning_to_retake_gcse_maths_id' => :'planningToRetakeGcseMathsId',
        :'planning_to_retake_gcse_science_id' => :'planningToRetakeGcseScienceId',
        :'consideration_journey_stage_id' => :'considerationJourneyStageId',
        :'type_id' => :'typeId',
        :'assignment_status_id' => :'assignmentStatusId',
        :'adviser_eligibility_id' => :'adviserEligibilityId',
        :'adviser_requirement_id' => :'adviserRequirementId',
        :'preferred_phone_number_type_id' => :'preferredPhoneNumberTypeId',
        :'preferred_contact_method_id' => :'preferredContactMethodId',
        :'gdpr_consent_id' => :'gdprConsentId',
        :'magic_link_token_status_id' => :'magicLinkTokenStatusId',
        :'status_is_waiting_to_be_assigned_at' => :'statusIsWaitingToBeAssignedAt',
        :'merged' => :'merged',
        :'find_apply_id' => :'findApplyId',
        :'email' => :'email',
        :'secondary_email' => :'secondaryEmail',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'date_of_birth' => :'dateOfBirth',
        :'mobile_telephone' => :'mobileTelephone',
        :'address_telephone' => :'addressTelephone',
        :'address_line1' => :'addressLine1',
        :'address_line2' => :'addressLine2',
        :'address_line3' => :'addressLine3',
        :'address_city' => :'addressCity',
        :'address_state_or_province' => :'addressStateOrProvince',
        :'address_postcode' => :'addressPostcode',
        :'telephone' => :'telephone',
        :'secondary_telephone' => :'secondaryTelephone',
        :'has_dbs_certificate' => :'hasDbsCertificate',
        :'dbs_certificate_issued_at' => :'dbsCertificateIssuedAt',
        :'classroom_experience_notes_raw' => :'classroomExperienceNotesRaw',
        :'teacher_id' => :'teacherId',
        :'eligibility_rules_passed' => :'eligibilityRulesPassed',
        :'do_not_bulk_email' => :'doNotBulkEmail',
        :'do_not_bulk_postal_mail' => :'doNotBulkPostalMail',
        :'do_not_email' => :'doNotEmail',
        :'do_not_postal_mail' => :'doNotPostalMail',
        :'do_not_send_mm' => :'doNotSendMm',
        :'opt_out_of_sms' => :'optOutOfSms',
        :'opt_out_of_gdpr' => :'optOutOfGdpr',
        :'is_new_registrant' => :'isNewRegistrant',
        :'magic_link_token' => :'magicLinkToken',
        :'magic_link_token_expires_at' => :'magicLinkTokenExpiresAt',
        :'has_teacher_training_adviser_subscription' => :'hasTeacherTrainingAdviserSubscription',
        :'teacher_training_adviser_subscription_channel_id' => :'teacherTrainingAdviserSubscriptionChannelId',
        :'teacher_training_adviser_subscription_start_at' => :'teacherTrainingAdviserSubscriptionStartAt',
        :'teacher_training_adviser_subscription_do_not_bulk_email' => :'teacherTrainingAdviserSubscriptionDoNotBulkEmail',
        :'teacher_training_adviser_subscription_do_not_bulk_postal_mail' => :'teacherTrainingAdviserSubscriptionDoNotBulkPostalMail',
        :'teacher_training_adviser_subscription_do_not_email' => :'teacherTrainingAdviserSubscriptionDoNotEmail',
        :'teacher_training_adviser_subscription_do_not_postal_mail' => :'teacherTrainingAdviserSubscriptionDoNotPostalMail',
        :'teacher_training_adviser_subscription_do_not_send_mm' => :'teacherTrainingAdviserSubscriptionDoNotSendMm',
        :'has_mailing_list_subscription' => :'hasMailingListSubscription',
        :'mailing_list_subscription_channel_id' => :'mailingListSubscriptionChannelId',
        :'mailing_list_subscription_start_at' => :'mailingListSubscriptionStartAt',
        :'mailing_list_subscription_do_not_bulk_email' => :'mailingListSubscriptionDoNotBulkEmail',
        :'mailing_list_subscription_do_not_bulk_postal_mail' => :'mailingListSubscriptionDoNotBulkPostalMail',
        :'mailing_list_subscription_do_not_email' => :'mailingListSubscriptionDoNotEmail',
        :'mailing_list_subscription_do_not_postal_mail' => :'mailingListSubscriptionDoNotPostalMail',
        :'mailing_list_subscription_do_not_send_mm' => :'mailingListSubscriptionDoNotSendMm',
        :'has_events_subscription' => :'hasEventsSubscription',
        :'events_subscription_channel_id' => :'eventsSubscriptionChannelId',
        :'events_subscription_type_id' => :'eventsSubscriptionTypeId',
        :'events_subscription_start_at' => :'eventsSubscriptionStartAt',
        :'events_subscription_do_not_bulk_email' => :'eventsSubscriptionDoNotBulkEmail',
        :'events_subscription_do_not_bulk_postal_mail' => :'eventsSubscriptionDoNotBulkPostalMail',
        :'events_subscription_do_not_email' => :'eventsSubscriptionDoNotEmail',
        :'events_subscription_do_not_postal_mail' => :'eventsSubscriptionDoNotPostalMail',
        :'events_subscription_do_not_send_mm' => :'eventsSubscriptionDoNotSendMm',
        :'teaching_event_registrations' => :'teachingEventRegistrations',
        :'qualifications' => :'qualifications',
        :'past_teaching_positions' => :'pastTeachingPositions',
        :'phone_call' => :'phoneCall',
        :'privacy_policy' => :'privacyPolicy'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'full_name' => :'String',
        :'preferred_teaching_subject_id' => :'String',
        :'secondary_preferred_teaching_subject_id' => :'String',
        :'country_id' => :'String',
        :'owning_business_unit_id' => :'String',
        :'master_id' => :'String',
        :'preferred_education_phase_id' => :'Integer',
        :'initial_teacher_training_year_id' => :'Integer',
        :'channel_id' => :'Integer',
        :'has_gcse_english_id' => :'Integer',
        :'has_gcse_maths_id' => :'Integer',
        :'has_gcse_science_id' => :'Integer',
        :'planning_to_retake_gcse_english_id' => :'Integer',
        :'planning_to_retake_gcse_maths_id' => :'Integer',
        :'planning_to_retake_gcse_science_id' => :'Integer',
        :'consideration_journey_stage_id' => :'Integer',
        :'type_id' => :'Integer',
        :'assignment_status_id' => :'Integer',
        :'adviser_eligibility_id' => :'Integer',
        :'adviser_requirement_id' => :'Integer',
        :'preferred_phone_number_type_id' => :'Integer',
        :'preferred_contact_method_id' => :'Integer',
        :'gdpr_consent_id' => :'Integer',
        :'magic_link_token_status_id' => :'Integer',
        :'status_is_waiting_to_be_assigned_at' => :'DateTime',
        :'merged' => :'BOOLEAN',
        :'find_apply_id' => :'String',
        :'email' => :'String',
        :'secondary_email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'date_of_birth' => :'DateTime',
        :'mobile_telephone' => :'String',
        :'address_telephone' => :'String',
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'address_line3' => :'String',
        :'address_city' => :'String',
        :'address_state_or_province' => :'String',
        :'address_postcode' => :'String',
        :'telephone' => :'String',
        :'secondary_telephone' => :'String',
        :'has_dbs_certificate' => :'BOOLEAN',
        :'dbs_certificate_issued_at' => :'DateTime',
        :'classroom_experience_notes_raw' => :'String',
        :'teacher_id' => :'String',
        :'eligibility_rules_passed' => :'String',
        :'do_not_bulk_email' => :'BOOLEAN',
        :'do_not_bulk_postal_mail' => :'BOOLEAN',
        :'do_not_email' => :'BOOLEAN',
        :'do_not_postal_mail' => :'BOOLEAN',
        :'do_not_send_mm' => :'BOOLEAN',
        :'opt_out_of_sms' => :'BOOLEAN',
        :'opt_out_of_gdpr' => :'BOOLEAN',
        :'is_new_registrant' => :'BOOLEAN',
        :'magic_link_token' => :'String',
        :'magic_link_token_expires_at' => :'DateTime',
        :'has_teacher_training_adviser_subscription' => :'BOOLEAN',
        :'teacher_training_adviser_subscription_channel_id' => :'Integer',
        :'teacher_training_adviser_subscription_start_at' => :'DateTime',
        :'teacher_training_adviser_subscription_do_not_bulk_email' => :'BOOLEAN',
        :'teacher_training_adviser_subscription_do_not_bulk_postal_mail' => :'BOOLEAN',
        :'teacher_training_adviser_subscription_do_not_email' => :'BOOLEAN',
        :'teacher_training_adviser_subscription_do_not_postal_mail' => :'BOOLEAN',
        :'teacher_training_adviser_subscription_do_not_send_mm' => :'BOOLEAN',
        :'has_mailing_list_subscription' => :'BOOLEAN',
        :'mailing_list_subscription_channel_id' => :'Integer',
        :'mailing_list_subscription_start_at' => :'DateTime',
        :'mailing_list_subscription_do_not_bulk_email' => :'BOOLEAN',
        :'mailing_list_subscription_do_not_bulk_postal_mail' => :'BOOLEAN',
        :'mailing_list_subscription_do_not_email' => :'BOOLEAN',
        :'mailing_list_subscription_do_not_postal_mail' => :'BOOLEAN',
        :'mailing_list_subscription_do_not_send_mm' => :'BOOLEAN',
        :'has_events_subscription' => :'BOOLEAN',
        :'events_subscription_channel_id' => :'Integer',
        :'events_subscription_type_id' => :'Integer',
        :'events_subscription_start_at' => :'DateTime',
        :'events_subscription_do_not_bulk_email' => :'BOOLEAN',
        :'events_subscription_do_not_bulk_postal_mail' => :'BOOLEAN',
        :'events_subscription_do_not_email' => :'BOOLEAN',
        :'events_subscription_do_not_postal_mail' => :'BOOLEAN',
        :'events_subscription_do_not_send_mm' => :'BOOLEAN',
        :'teaching_event_registrations' => :'Array<TeachingEventRegistration>',
        :'qualifications' => :'Array<CandidateQualification>',
        :'past_teaching_positions' => :'Array<CandidatePastTeachingPosition>',
        :'phone_call' => :'PhoneCall',
        :'privacy_policy' => :'CandidatePrivacyPolicy'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'fullName')
        self.full_name = attributes[:'fullName']
      end

      if attributes.has_key?(:'preferredTeachingSubjectId')
        self.preferred_teaching_subject_id = attributes[:'preferredTeachingSubjectId']
      end

      if attributes.has_key?(:'secondaryPreferredTeachingSubjectId')
        self.secondary_preferred_teaching_subject_id = attributes[:'secondaryPreferredTeachingSubjectId']
      end

      if attributes.has_key?(:'countryId')
        self.country_id = attributes[:'countryId']
      end

      if attributes.has_key?(:'owningBusinessUnitId')
        self.owning_business_unit_id = attributes[:'owningBusinessUnitId']
      end

      if attributes.has_key?(:'masterId')
        self.master_id = attributes[:'masterId']
      end

      if attributes.has_key?(:'preferredEducationPhaseId')
        self.preferred_education_phase_id = attributes[:'preferredEducationPhaseId']
      end

      if attributes.has_key?(:'initialTeacherTrainingYearId')
        self.initial_teacher_training_year_id = attributes[:'initialTeacherTrainingYearId']
      end

      if attributes.has_key?(:'channelId')
        self.channel_id = attributes[:'channelId']
      end

      if attributes.has_key?(:'hasGcseEnglishId')
        self.has_gcse_english_id = attributes[:'hasGcseEnglishId']
      end

      if attributes.has_key?(:'hasGcseMathsId')
        self.has_gcse_maths_id = attributes[:'hasGcseMathsId']
      end

      if attributes.has_key?(:'hasGcseScienceId')
        self.has_gcse_science_id = attributes[:'hasGcseScienceId']
      end

      if attributes.has_key?(:'planningToRetakeGcseEnglishId')
        self.planning_to_retake_gcse_english_id = attributes[:'planningToRetakeGcseEnglishId']
      end

      if attributes.has_key?(:'planningToRetakeGcseMathsId')
        self.planning_to_retake_gcse_maths_id = attributes[:'planningToRetakeGcseMathsId']
      end

      if attributes.has_key?(:'planningToRetakeGcseScienceId')
        self.planning_to_retake_gcse_science_id = attributes[:'planningToRetakeGcseScienceId']
      end

      if attributes.has_key?(:'considerationJourneyStageId')
        self.consideration_journey_stage_id = attributes[:'considerationJourneyStageId']
      end

      if attributes.has_key?(:'typeId')
        self.type_id = attributes[:'typeId']
      end

      if attributes.has_key?(:'assignmentStatusId')
        self.assignment_status_id = attributes[:'assignmentStatusId']
      end

      if attributes.has_key?(:'adviserEligibilityId')
        self.adviser_eligibility_id = attributes[:'adviserEligibilityId']
      end

      if attributes.has_key?(:'adviserRequirementId')
        self.adviser_requirement_id = attributes[:'adviserRequirementId']
      end

      if attributes.has_key?(:'preferredPhoneNumberTypeId')
        self.preferred_phone_number_type_id = attributes[:'preferredPhoneNumberTypeId']
      end

      if attributes.has_key?(:'preferredContactMethodId')
        self.preferred_contact_method_id = attributes[:'preferredContactMethodId']
      end

      if attributes.has_key?(:'gdprConsentId')
        self.gdpr_consent_id = attributes[:'gdprConsentId']
      end

      if attributes.has_key?(:'magicLinkTokenStatusId')
        self.magic_link_token_status_id = attributes[:'magicLinkTokenStatusId']
      end

      if attributes.has_key?(:'statusIsWaitingToBeAssignedAt')
        self.status_is_waiting_to_be_assigned_at = attributes[:'statusIsWaitingToBeAssignedAt']
      end

      if attributes.has_key?(:'merged')
        self.merged = attributes[:'merged']
      end

      if attributes.has_key?(:'findApplyId')
        self.find_apply_id = attributes[:'findApplyId']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'secondaryEmail')
        self.secondary_email = attributes[:'secondaryEmail']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'dateOfBirth')
        self.date_of_birth = attributes[:'dateOfBirth']
      end

      if attributes.has_key?(:'mobileTelephone')
        self.mobile_telephone = attributes[:'mobileTelephone']
      end

      if attributes.has_key?(:'addressTelephone')
        self.address_telephone = attributes[:'addressTelephone']
      end

      if attributes.has_key?(:'addressLine1')
        self.address_line1 = attributes[:'addressLine1']
      end

      if attributes.has_key?(:'addressLine2')
        self.address_line2 = attributes[:'addressLine2']
      end

      if attributes.has_key?(:'addressLine3')
        self.address_line3 = attributes[:'addressLine3']
      end

      if attributes.has_key?(:'addressCity')
        self.address_city = attributes[:'addressCity']
      end

      if attributes.has_key?(:'addressStateOrProvince')
        self.address_state_or_province = attributes[:'addressStateOrProvince']
      end

      if attributes.has_key?(:'addressPostcode')
        self.address_postcode = attributes[:'addressPostcode']
      end

      if attributes.has_key?(:'telephone')
        self.telephone = attributes[:'telephone']
      end

      if attributes.has_key?(:'secondaryTelephone')
        self.secondary_telephone = attributes[:'secondaryTelephone']
      end

      if attributes.has_key?(:'hasDbsCertificate')
        self.has_dbs_certificate = attributes[:'hasDbsCertificate']
      end

      if attributes.has_key?(:'dbsCertificateIssuedAt')
        self.dbs_certificate_issued_at = attributes[:'dbsCertificateIssuedAt']
      end

      if attributes.has_key?(:'classroomExperienceNotesRaw')
        self.classroom_experience_notes_raw = attributes[:'classroomExperienceNotesRaw']
      end

      if attributes.has_key?(:'teacherId')
        self.teacher_id = attributes[:'teacherId']
      end

      if attributes.has_key?(:'eligibilityRulesPassed')
        self.eligibility_rules_passed = attributes[:'eligibilityRulesPassed']
      end

      if attributes.has_key?(:'doNotBulkEmail')
        self.do_not_bulk_email = attributes[:'doNotBulkEmail']
      end

      if attributes.has_key?(:'doNotBulkPostalMail')
        self.do_not_bulk_postal_mail = attributes[:'doNotBulkPostalMail']
      end

      if attributes.has_key?(:'doNotEmail')
        self.do_not_email = attributes[:'doNotEmail']
      end

      if attributes.has_key?(:'doNotPostalMail')
        self.do_not_postal_mail = attributes[:'doNotPostalMail']
      end

      if attributes.has_key?(:'doNotSendMm')
        self.do_not_send_mm = attributes[:'doNotSendMm']
      end

      if attributes.has_key?(:'optOutOfSms')
        self.opt_out_of_sms = attributes[:'optOutOfSms']
      end

      if attributes.has_key?(:'optOutOfGdpr')
        self.opt_out_of_gdpr = attributes[:'optOutOfGdpr']
      end

      if attributes.has_key?(:'isNewRegistrant')
        self.is_new_registrant = attributes[:'isNewRegistrant']
      end

      if attributes.has_key?(:'magicLinkToken')
        self.magic_link_token = attributes[:'magicLinkToken']
      end

      if attributes.has_key?(:'magicLinkTokenExpiresAt')
        self.magic_link_token_expires_at = attributes[:'magicLinkTokenExpiresAt']
      end

      if attributes.has_key?(:'hasTeacherTrainingAdviserSubscription')
        self.has_teacher_training_adviser_subscription = attributes[:'hasTeacherTrainingAdviserSubscription']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionChannelId')
        self.teacher_training_adviser_subscription_channel_id = attributes[:'teacherTrainingAdviserSubscriptionChannelId']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionStartAt')
        self.teacher_training_adviser_subscription_start_at = attributes[:'teacherTrainingAdviserSubscriptionStartAt']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionDoNotBulkEmail')
        self.teacher_training_adviser_subscription_do_not_bulk_email = attributes[:'teacherTrainingAdviserSubscriptionDoNotBulkEmail']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionDoNotBulkPostalMail')
        self.teacher_training_adviser_subscription_do_not_bulk_postal_mail = attributes[:'teacherTrainingAdviserSubscriptionDoNotBulkPostalMail']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionDoNotEmail')
        self.teacher_training_adviser_subscription_do_not_email = attributes[:'teacherTrainingAdviserSubscriptionDoNotEmail']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionDoNotPostalMail')
        self.teacher_training_adviser_subscription_do_not_postal_mail = attributes[:'teacherTrainingAdviserSubscriptionDoNotPostalMail']
      end

      if attributes.has_key?(:'teacherTrainingAdviserSubscriptionDoNotSendMm')
        self.teacher_training_adviser_subscription_do_not_send_mm = attributes[:'teacherTrainingAdviserSubscriptionDoNotSendMm']
      end

      if attributes.has_key?(:'hasMailingListSubscription')
        self.has_mailing_list_subscription = attributes[:'hasMailingListSubscription']
      end

      if attributes.has_key?(:'mailingListSubscriptionChannelId')
        self.mailing_list_subscription_channel_id = attributes[:'mailingListSubscriptionChannelId']
      end

      if attributes.has_key?(:'mailingListSubscriptionStartAt')
        self.mailing_list_subscription_start_at = attributes[:'mailingListSubscriptionStartAt']
      end

      if attributes.has_key?(:'mailingListSubscriptionDoNotBulkEmail')
        self.mailing_list_subscription_do_not_bulk_email = attributes[:'mailingListSubscriptionDoNotBulkEmail']
      end

      if attributes.has_key?(:'mailingListSubscriptionDoNotBulkPostalMail')
        self.mailing_list_subscription_do_not_bulk_postal_mail = attributes[:'mailingListSubscriptionDoNotBulkPostalMail']
      end

      if attributes.has_key?(:'mailingListSubscriptionDoNotEmail')
        self.mailing_list_subscription_do_not_email = attributes[:'mailingListSubscriptionDoNotEmail']
      end

      if attributes.has_key?(:'mailingListSubscriptionDoNotPostalMail')
        self.mailing_list_subscription_do_not_postal_mail = attributes[:'mailingListSubscriptionDoNotPostalMail']
      end

      if attributes.has_key?(:'mailingListSubscriptionDoNotSendMm')
        self.mailing_list_subscription_do_not_send_mm = attributes[:'mailingListSubscriptionDoNotSendMm']
      end

      if attributes.has_key?(:'hasEventsSubscription')
        self.has_events_subscription = attributes[:'hasEventsSubscription']
      end

      if attributes.has_key?(:'eventsSubscriptionChannelId')
        self.events_subscription_channel_id = attributes[:'eventsSubscriptionChannelId']
      end

      if attributes.has_key?(:'eventsSubscriptionTypeId')
        self.events_subscription_type_id = attributes[:'eventsSubscriptionTypeId']
      end

      if attributes.has_key?(:'eventsSubscriptionStartAt')
        self.events_subscription_start_at = attributes[:'eventsSubscriptionStartAt']
      end

      if attributes.has_key?(:'eventsSubscriptionDoNotBulkEmail')
        self.events_subscription_do_not_bulk_email = attributes[:'eventsSubscriptionDoNotBulkEmail']
      end

      if attributes.has_key?(:'eventsSubscriptionDoNotBulkPostalMail')
        self.events_subscription_do_not_bulk_postal_mail = attributes[:'eventsSubscriptionDoNotBulkPostalMail']
      end

      if attributes.has_key?(:'eventsSubscriptionDoNotEmail')
        self.events_subscription_do_not_email = attributes[:'eventsSubscriptionDoNotEmail']
      end

      if attributes.has_key?(:'eventsSubscriptionDoNotPostalMail')
        self.events_subscription_do_not_postal_mail = attributes[:'eventsSubscriptionDoNotPostalMail']
      end

      if attributes.has_key?(:'eventsSubscriptionDoNotSendMm')
        self.events_subscription_do_not_send_mm = attributes[:'eventsSubscriptionDoNotSendMm']
      end

      if attributes.has_key?(:'teachingEventRegistrations')
        if (value = attributes[:'teachingEventRegistrations']).is_a?(Array)
          self.teaching_event_registrations = value
        end
      end

      if attributes.has_key?(:'qualifications')
        if (value = attributes[:'qualifications']).is_a?(Array)
          self.qualifications = value
        end
      end

      if attributes.has_key?(:'pastTeachingPositions')
        if (value = attributes[:'pastTeachingPositions']).is_a?(Array)
          self.past_teaching_positions = value
        end
      end

      if attributes.has_key?(:'phoneCall')
        self.phone_call = attributes[:'phoneCall']
      end

      if attributes.has_key?(:'privacyPolicy')
        self.privacy_policy = attributes[:'privacyPolicy']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email.to_s.length > 100
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 100.')
      end

      if @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if !@secondary_email.nil? && @secondary_email.to_s.length > 100
        invalid_properties.push('invalid value for "secondary_email", the character length must be smaller than or equal to 100.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @first_name.to_s.length > 256
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 256.')
      end

      if @first_name.to_s.length < 1
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 1.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @last_name.to_s.length > 256
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 256.')
      end

      if @last_name.to_s.length < 1
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 1.')
      end

      if !@mobile_telephone.nil? && @mobile_telephone.to_s.length > 25
        invalid_properties.push('invalid value for "mobile_telephone", the character length must be smaller than or equal to 25.')
      end

      if !@mobile_telephone.nil? && @mobile_telephone.to_s.length < 5
        invalid_properties.push('invalid value for "mobile_telephone", the character length must be great than or equal to 5.')
      end

      if !@mobile_telephone.nil? && @mobile_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        invalid_properties.push('invalid value for "mobile_telephone", must conform to the pattern /^[^a-zA-Z]+$/.')
      end

      if !@address_telephone.nil? && @address_telephone.to_s.length > 25
        invalid_properties.push('invalid value for "address_telephone", the character length must be smaller than or equal to 25.')
      end

      if !@address_telephone.nil? && @address_telephone.to_s.length < 5
        invalid_properties.push('invalid value for "address_telephone", the character length must be great than or equal to 5.')
      end

      if !@address_telephone.nil? && @address_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        invalid_properties.push('invalid value for "address_telephone", must conform to the pattern /^[^a-zA-Z]+$/.')
      end

      if !@address_line1.nil? && @address_line1.to_s.length > 1024
        invalid_properties.push('invalid value for "address_line1", the character length must be smaller than or equal to 1024.')
      end

      if !@address_line2.nil? && @address_line2.to_s.length > 1024
        invalid_properties.push('invalid value for "address_line2", the character length must be smaller than or equal to 1024.')
      end

      if !@address_line3.nil? && @address_line3.to_s.length > 1024
        invalid_properties.push('invalid value for "address_line3", the character length must be smaller than or equal to 1024.')
      end

      if !@address_city.nil? && @address_city.to_s.length > 128
        invalid_properties.push('invalid value for "address_city", the character length must be smaller than or equal to 128.')
      end

      if !@address_state_or_province.nil? && @address_state_or_province.to_s.length > 100
        invalid_properties.push('invalid value for "address_state_or_province", the character length must be smaller than or equal to 100.')
      end

      if !@telephone.nil? && @telephone.to_s.length > 25
        invalid_properties.push('invalid value for "telephone", the character length must be smaller than or equal to 25.')
      end

      if !@telephone.nil? && @telephone.to_s.length < 5
        invalid_properties.push('invalid value for "telephone", the character length must be great than or equal to 5.')
      end

      if !@telephone.nil? && @telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        invalid_properties.push('invalid value for "telephone", must conform to the pattern /^[^a-zA-Z]+$/.')
      end

      if !@secondary_telephone.nil? && @secondary_telephone.to_s.length > 25
        invalid_properties.push('invalid value for "secondary_telephone", the character length must be smaller than or equal to 25.')
      end

      if !@secondary_telephone.nil? && @secondary_telephone.to_s.length < 5
        invalid_properties.push('invalid value for "secondary_telephone", the character length must be great than or equal to 5.')
      end

      if !@secondary_telephone.nil? && @secondary_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        invalid_properties.push('invalid value for "secondary_telephone", must conform to the pattern /^[^a-zA-Z]+$/.')
      end

      if !@classroom_experience_notes_raw.nil? && @classroom_experience_notes_raw.to_s.length > 10000
        invalid_properties.push('invalid value for "classroom_experience_notes_raw", the character length must be smaller than or equal to 10000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @email.nil?
      return false if @email.to_s.length > 100
      return false if @email.to_s.length < 1
      return false if !@secondary_email.nil? && @secondary_email.to_s.length > 100
      return false if @first_name.nil?
      return false if @first_name.to_s.length > 256
      return false if @first_name.to_s.length < 1
      return false if @last_name.nil?
      return false if @last_name.to_s.length > 256
      return false if @last_name.to_s.length < 1
      return false if !@mobile_telephone.nil? && @mobile_telephone.to_s.length > 25
      return false if !@mobile_telephone.nil? && @mobile_telephone.to_s.length < 5
      return false if !@mobile_telephone.nil? && @mobile_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
      return false if !@address_telephone.nil? && @address_telephone.to_s.length > 25
      return false if !@address_telephone.nil? && @address_telephone.to_s.length < 5
      return false if !@address_telephone.nil? && @address_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
      return false if !@address_line1.nil? && @address_line1.to_s.length > 1024
      return false if !@address_line2.nil? && @address_line2.to_s.length > 1024
      return false if !@address_line3.nil? && @address_line3.to_s.length > 1024
      return false if !@address_city.nil? && @address_city.to_s.length > 128
      return false if !@address_state_or_province.nil? && @address_state_or_province.to_s.length > 100
      return false if !@telephone.nil? && @telephone.to_s.length > 25
      return false if !@telephone.nil? && @telephone.to_s.length < 5
      return false if !@telephone.nil? && @telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
      return false if !@secondary_telephone.nil? && @secondary_telephone.to_s.length > 25
      return false if !@secondary_telephone.nil? && @secondary_telephone.to_s.length < 5
      return false if !@secondary_telephone.nil? && @secondary_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
      return false if !@classroom_experience_notes_raw.nil? && @classroom_experience_notes_raw.to_s.length > 10000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 100
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 100.'
      end

      if email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_email Value to be assigned
    def secondary_email=(secondary_email)
      if !secondary_email.nil? && secondary_email.to_s.length > 100
        fail ArgumentError, 'invalid value for "secondary_email", the character length must be smaller than or equal to 100.'
      end

      @secondary_email = secondary_email
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 256.'
      end

      if first_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 1.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 256.'
      end

      if last_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 1.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_telephone Value to be assigned
    def mobile_telephone=(mobile_telephone)
      if !mobile_telephone.nil? && mobile_telephone.to_s.length > 25
        fail ArgumentError, 'invalid value for "mobile_telephone", the character length must be smaller than or equal to 25.'
      end

      if !mobile_telephone.nil? && mobile_telephone.to_s.length < 5
        fail ArgumentError, 'invalid value for "mobile_telephone", the character length must be great than or equal to 5.'
      end

      if !mobile_telephone.nil? && mobile_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        fail ArgumentError, 'invalid value for "mobile_telephone", must conform to the pattern /^[^a-zA-Z]+$/.'
      end

      @mobile_telephone = mobile_telephone
    end

    # Custom attribute writer method with validation
    # @param [Object] address_telephone Value to be assigned
    def address_telephone=(address_telephone)
      if !address_telephone.nil? && address_telephone.to_s.length > 25
        fail ArgumentError, 'invalid value for "address_telephone", the character length must be smaller than or equal to 25.'
      end

      if !address_telephone.nil? && address_telephone.to_s.length < 5
        fail ArgumentError, 'invalid value for "address_telephone", the character length must be great than or equal to 5.'
      end

      if !address_telephone.nil? && address_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        fail ArgumentError, 'invalid value for "address_telephone", must conform to the pattern /^[^a-zA-Z]+$/.'
      end

      @address_telephone = address_telephone
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line1 Value to be assigned
    def address_line1=(address_line1)
      if !address_line1.nil? && address_line1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address_line1", the character length must be smaller than or equal to 1024.'
      end

      @address_line1 = address_line1
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line2 Value to be assigned
    def address_line2=(address_line2)
      if !address_line2.nil? && address_line2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address_line2", the character length must be smaller than or equal to 1024.'
      end

      @address_line2 = address_line2
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line3 Value to be assigned
    def address_line3=(address_line3)
      if !address_line3.nil? && address_line3.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address_line3", the character length must be smaller than or equal to 1024.'
      end

      @address_line3 = address_line3
    end

    # Custom attribute writer method with validation
    # @param [Object] address_city Value to be assigned
    def address_city=(address_city)
      if !address_city.nil? && address_city.to_s.length > 128
        fail ArgumentError, 'invalid value for "address_city", the character length must be smaller than or equal to 128.'
      end

      @address_city = address_city
    end

    # Custom attribute writer method with validation
    # @param [Object] address_state_or_province Value to be assigned
    def address_state_or_province=(address_state_or_province)
      if !address_state_or_province.nil? && address_state_or_province.to_s.length > 100
        fail ArgumentError, 'invalid value for "address_state_or_province", the character length must be smaller than or equal to 100.'
      end

      @address_state_or_province = address_state_or_province
    end

    # Custom attribute writer method with validation
    # @param [Object] telephone Value to be assigned
    def telephone=(telephone)
      if !telephone.nil? && telephone.to_s.length > 25
        fail ArgumentError, 'invalid value for "telephone", the character length must be smaller than or equal to 25.'
      end

      if !telephone.nil? && telephone.to_s.length < 5
        fail ArgumentError, 'invalid value for "telephone", the character length must be great than or equal to 5.'
      end

      if !telephone.nil? && telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        fail ArgumentError, 'invalid value for "telephone", must conform to the pattern /^[^a-zA-Z]+$/.'
      end

      @telephone = telephone
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_telephone Value to be assigned
    def secondary_telephone=(secondary_telephone)
      if !secondary_telephone.nil? && secondary_telephone.to_s.length > 25
        fail ArgumentError, 'invalid value for "secondary_telephone", the character length must be smaller than or equal to 25.'
      end

      if !secondary_telephone.nil? && secondary_telephone.to_s.length < 5
        fail ArgumentError, 'invalid value for "secondary_telephone", the character length must be great than or equal to 5.'
      end

      if !secondary_telephone.nil? && secondary_telephone !~ Regexp.new(/^[^a-zA-Z]+$/)
        fail ArgumentError, 'invalid value for "secondary_telephone", must conform to the pattern /^[^a-zA-Z]+$/.'
      end

      @secondary_telephone = secondary_telephone
    end

    # Custom attribute writer method with validation
    # @param [Object] classroom_experience_notes_raw Value to be assigned
    def classroom_experience_notes_raw=(classroom_experience_notes_raw)
      if !classroom_experience_notes_raw.nil? && classroom_experience_notes_raw.to_s.length > 10000
        fail ArgumentError, 'invalid value for "classroom_experience_notes_raw", the character length must be smaller than or equal to 10000.'
      end

      @classroom_experience_notes_raw = classroom_experience_notes_raw
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          full_name == o.full_name &&
          preferred_teaching_subject_id == o.preferred_teaching_subject_id &&
          secondary_preferred_teaching_subject_id == o.secondary_preferred_teaching_subject_id &&
          country_id == o.country_id &&
          owning_business_unit_id == o.owning_business_unit_id &&
          master_id == o.master_id &&
          preferred_education_phase_id == o.preferred_education_phase_id &&
          initial_teacher_training_year_id == o.initial_teacher_training_year_id &&
          channel_id == o.channel_id &&
          has_gcse_english_id == o.has_gcse_english_id &&
          has_gcse_maths_id == o.has_gcse_maths_id &&
          has_gcse_science_id == o.has_gcse_science_id &&
          planning_to_retake_gcse_english_id == o.planning_to_retake_gcse_english_id &&
          planning_to_retake_gcse_maths_id == o.planning_to_retake_gcse_maths_id &&
          planning_to_retake_gcse_science_id == o.planning_to_retake_gcse_science_id &&
          consideration_journey_stage_id == o.consideration_journey_stage_id &&
          type_id == o.type_id &&
          assignment_status_id == o.assignment_status_id &&
          adviser_eligibility_id == o.adviser_eligibility_id &&
          adviser_requirement_id == o.adviser_requirement_id &&
          preferred_phone_number_type_id == o.preferred_phone_number_type_id &&
          preferred_contact_method_id == o.preferred_contact_method_id &&
          gdpr_consent_id == o.gdpr_consent_id &&
          magic_link_token_status_id == o.magic_link_token_status_id &&
          status_is_waiting_to_be_assigned_at == o.status_is_waiting_to_be_assigned_at &&
          merged == o.merged &&
          find_apply_id == o.find_apply_id &&
          email == o.email &&
          secondary_email == o.secondary_email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          date_of_birth == o.date_of_birth &&
          mobile_telephone == o.mobile_telephone &&
          address_telephone == o.address_telephone &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          address_line3 == o.address_line3 &&
          address_city == o.address_city &&
          address_state_or_province == o.address_state_or_province &&
          address_postcode == o.address_postcode &&
          telephone == o.telephone &&
          secondary_telephone == o.secondary_telephone &&
          has_dbs_certificate == o.has_dbs_certificate &&
          dbs_certificate_issued_at == o.dbs_certificate_issued_at &&
          classroom_experience_notes_raw == o.classroom_experience_notes_raw &&
          teacher_id == o.teacher_id &&
          eligibility_rules_passed == o.eligibility_rules_passed &&
          do_not_bulk_email == o.do_not_bulk_email &&
          do_not_bulk_postal_mail == o.do_not_bulk_postal_mail &&
          do_not_email == o.do_not_email &&
          do_not_postal_mail == o.do_not_postal_mail &&
          do_not_send_mm == o.do_not_send_mm &&
          opt_out_of_sms == o.opt_out_of_sms &&
          opt_out_of_gdpr == o.opt_out_of_gdpr &&
          is_new_registrant == o.is_new_registrant &&
          magic_link_token == o.magic_link_token &&
          magic_link_token_expires_at == o.magic_link_token_expires_at &&
          has_teacher_training_adviser_subscription == o.has_teacher_training_adviser_subscription &&
          teacher_training_adviser_subscription_channel_id == o.teacher_training_adviser_subscription_channel_id &&
          teacher_training_adviser_subscription_start_at == o.teacher_training_adviser_subscription_start_at &&
          teacher_training_adviser_subscription_do_not_bulk_email == o.teacher_training_adviser_subscription_do_not_bulk_email &&
          teacher_training_adviser_subscription_do_not_bulk_postal_mail == o.teacher_training_adviser_subscription_do_not_bulk_postal_mail &&
          teacher_training_adviser_subscription_do_not_email == o.teacher_training_adviser_subscription_do_not_email &&
          teacher_training_adviser_subscription_do_not_postal_mail == o.teacher_training_adviser_subscription_do_not_postal_mail &&
          teacher_training_adviser_subscription_do_not_send_mm == o.teacher_training_adviser_subscription_do_not_send_mm &&
          has_mailing_list_subscription == o.has_mailing_list_subscription &&
          mailing_list_subscription_channel_id == o.mailing_list_subscription_channel_id &&
          mailing_list_subscription_start_at == o.mailing_list_subscription_start_at &&
          mailing_list_subscription_do_not_bulk_email == o.mailing_list_subscription_do_not_bulk_email &&
          mailing_list_subscription_do_not_bulk_postal_mail == o.mailing_list_subscription_do_not_bulk_postal_mail &&
          mailing_list_subscription_do_not_email == o.mailing_list_subscription_do_not_email &&
          mailing_list_subscription_do_not_postal_mail == o.mailing_list_subscription_do_not_postal_mail &&
          mailing_list_subscription_do_not_send_mm == o.mailing_list_subscription_do_not_send_mm &&
          has_events_subscription == o.has_events_subscription &&
          events_subscription_channel_id == o.events_subscription_channel_id &&
          events_subscription_type_id == o.events_subscription_type_id &&
          events_subscription_start_at == o.events_subscription_start_at &&
          events_subscription_do_not_bulk_email == o.events_subscription_do_not_bulk_email &&
          events_subscription_do_not_bulk_postal_mail == o.events_subscription_do_not_bulk_postal_mail &&
          events_subscription_do_not_email == o.events_subscription_do_not_email &&
          events_subscription_do_not_postal_mail == o.events_subscription_do_not_postal_mail &&
          events_subscription_do_not_send_mm == o.events_subscription_do_not_send_mm &&
          teaching_event_registrations == o.teaching_event_registrations &&
          qualifications == o.qualifications &&
          past_teaching_positions == o.past_teaching_positions &&
          phone_call == o.phone_call &&
          privacy_policy == o.privacy_policy
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, full_name, preferred_teaching_subject_id, secondary_preferred_teaching_subject_id, country_id, owning_business_unit_id, master_id, preferred_education_phase_id, initial_teacher_training_year_id, channel_id, has_gcse_english_id, has_gcse_maths_id, has_gcse_science_id, planning_to_retake_gcse_english_id, planning_to_retake_gcse_maths_id, planning_to_retake_gcse_science_id, consideration_journey_stage_id, type_id, assignment_status_id, adviser_eligibility_id, adviser_requirement_id, preferred_phone_number_type_id, preferred_contact_method_id, gdpr_consent_id, magic_link_token_status_id, status_is_waiting_to_be_assigned_at, merged, find_apply_id, email, secondary_email, first_name, last_name, date_of_birth, mobile_telephone, address_telephone, address_line1, address_line2, address_line3, address_city, address_state_or_province, address_postcode, telephone, secondary_telephone, has_dbs_certificate, dbs_certificate_issued_at, classroom_experience_notes_raw, teacher_id, eligibility_rules_passed, do_not_bulk_email, do_not_bulk_postal_mail, do_not_email, do_not_postal_mail, do_not_send_mm, opt_out_of_sms, opt_out_of_gdpr, is_new_registrant, magic_link_token, magic_link_token_expires_at, has_teacher_training_adviser_subscription, teacher_training_adviser_subscription_channel_id, teacher_training_adviser_subscription_start_at, teacher_training_adviser_subscription_do_not_bulk_email, teacher_training_adviser_subscription_do_not_bulk_postal_mail, teacher_training_adviser_subscription_do_not_email, teacher_training_adviser_subscription_do_not_postal_mail, teacher_training_adviser_subscription_do_not_send_mm, has_mailing_list_subscription, mailing_list_subscription_channel_id, mailing_list_subscription_start_at, mailing_list_subscription_do_not_bulk_email, mailing_list_subscription_do_not_bulk_postal_mail, mailing_list_subscription_do_not_email, mailing_list_subscription_do_not_postal_mail, mailing_list_subscription_do_not_send_mm, has_events_subscription, events_subscription_channel_id, events_subscription_type_id, events_subscription_start_at, events_subscription_do_not_bulk_email, events_subscription_do_not_bulk_postal_mail, events_subscription_do_not_email, events_subscription_do_not_postal_mail, events_subscription_do_not_send_mm, teaching_event_registrations, qualifications, past_teaching_positions, phone_call, privacy_policy].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = GetIntoTeachingApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
