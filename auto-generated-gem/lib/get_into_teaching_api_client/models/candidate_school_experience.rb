=begin
#Get into Teaching API - V1

# Provides a RESTful API for integrating with the Get into Teaching CRM. The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events). The GIT API aims to provide: * Simple, task-based RESTful APIs. * Message queueing (while the GIT CRM is offline for updates). * Validation to ensure consistency across services writing to the GIT CRM.                         

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module GetIntoTeachingApiClient
  class CandidateSchoolExperience
    attr_accessor :id

    attr_accessor :school_urn

    attr_accessor :duration_of_placement_in_days

    attr_accessor :date_of_school_experience

    attr_accessor :status

    attr_accessor :teaching_subject_id

    attr_accessor :notes

    attr_accessor :school_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'school_urn' => :'schoolUrn',
        :'duration_of_placement_in_days' => :'durationOfPlacementInDays',
        :'date_of_school_experience' => :'dateOfSchoolExperience',
        :'status' => :'status',
        :'teaching_subject_id' => :'teachingSubjectId',
        :'notes' => :'notes',
        :'school_name' => :'schoolName'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'school_urn' => :'String',
        :'duration_of_placement_in_days' => :'Integer',
        :'date_of_school_experience' => :'Time',
        :'status' => :'Integer',
        :'teaching_subject_id' => :'String',
        :'notes' => :'String',
        :'school_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'id',
        :'school_urn',
        :'duration_of_placement_in_days',
        :'date_of_school_experience',
        :'status',
        :'teaching_subject_id',
        :'notes',
        :'school_name'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GetIntoTeachingApiClient::CandidateSchoolExperience` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GetIntoTeachingApiClient::CandidateSchoolExperience`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'school_urn')
        self.school_urn = attributes[:'school_urn']
      end

      if attributes.key?(:'duration_of_placement_in_days')
        self.duration_of_placement_in_days = attributes[:'duration_of_placement_in_days']
      end

      if attributes.key?(:'date_of_school_experience')
        self.date_of_school_experience = attributes[:'date_of_school_experience']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'teaching_subject_id')
        self.teaching_subject_id = attributes[:'teaching_subject_id']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'school_name')
        self.school_name = attributes[:'school_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@school_urn.nil? && @school_urn.to_s.length > 8
        invalid_properties.push('invalid value for "school_urn", the character length must be smaller than or equal to 8.')
      end

      if !@duration_of_placement_in_days.nil? && @duration_of_placement_in_days > 100
        invalid_properties.push('invalid value for "duration_of_placement_in_days", must be smaller than or equal to 100.')
      end

      if !@notes.nil? && @notes.to_s.length > 2000
        invalid_properties.push('invalid value for "notes", the character length must be smaller than or equal to 2000.')
      end

      if !@school_name.nil? && @school_name.to_s.length > 100
        invalid_properties.push('invalid value for "school_name", the character length must be smaller than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@school_urn.nil? && @school_urn.to_s.length > 8
      return false if !@duration_of_placement_in_days.nil? && @duration_of_placement_in_days > 100
      return false if !@notes.nil? && @notes.to_s.length > 2000
      return false if !@school_name.nil? && @school_name.to_s.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] school_urn Value to be assigned
    def school_urn=(school_urn)
      if !school_urn.nil? && school_urn.to_s.length > 8
        fail ArgumentError, 'invalid value for "school_urn", the character length must be smaller than or equal to 8.'
      end

      @school_urn = school_urn
    end

    # Custom attribute writer method with validation
    # @param [Object] duration_of_placement_in_days Value to be assigned
    def duration_of_placement_in_days=(duration_of_placement_in_days)
      if !duration_of_placement_in_days.nil? && duration_of_placement_in_days > 100
        fail ArgumentError, 'invalid value for "duration_of_placement_in_days", must be smaller than or equal to 100.'
      end

      @duration_of_placement_in_days = duration_of_placement_in_days
    end

    # Custom attribute writer method with validation
    # @param [Object] notes Value to be assigned
    def notes=(notes)
      if !notes.nil? && notes.to_s.length > 2000
        fail ArgumentError, 'invalid value for "notes", the character length must be smaller than or equal to 2000.'
      end

      @notes = notes
    end

    # Custom attribute writer method with validation
    # @param [Object] school_name Value to be assigned
    def school_name=(school_name)
      if !school_name.nil? && school_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "school_name", the character length must be smaller than or equal to 100.'
      end

      @school_name = school_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          school_urn == o.school_urn &&
          duration_of_placement_in_days == o.duration_of_placement_in_days &&
          date_of_school_experience == o.date_of_school_experience &&
          status == o.status &&
          teaching_subject_id == o.teaching_subject_id &&
          notes == o.notes &&
          school_name == o.school_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, school_urn, duration_of_placement_in_days, date_of_school_experience, status, teaching_subject_id, notes, school_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GetIntoTeachingApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
