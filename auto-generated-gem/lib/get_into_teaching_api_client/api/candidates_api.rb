=begin
#Get into Teaching API - V1

# Provides a RESTful API for integrating with the Get into Teaching CRM. The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events). The GIT API aims to provide: * Simple, task-based RESTful APIs. * Message queueing (while the GIT CRM is offline for updates). * Validation to ensure consistency across services writing to the GIT CRM.                         

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module GetIntoTeachingApiClient
  class CandidatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a candidate access token.
    #                   Finds a candidate matching at least 3 of the provided CandidateAccessTokenRequest attributes (including email).                   If a candidate is found, an access token (PIN code) will be sent to the candidate email address                   that can then be used for verification.
    # @param existing_candidate_request [ExistingCandidateRequest] Candidate access token request (must match an existing candidate).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_candidate_access_token(existing_candidate_request, opts = {})
      create_candidate_access_token_with_http_info(existing_candidate_request, opts)
      nil
    end

    # Creates a candidate access token.
    #                   Finds a candidate matching at least 3 of the provided CandidateAccessTokenRequest attributes (including email).                   If a candidate is found, an access token (PIN code) will be sent to the candidate email address                   that can then be used for verification.
    # @param existing_candidate_request [ExistingCandidateRequest] Candidate access token request (must match an existing candidate).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_candidate_access_token_with_http_info(existing_candidate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CandidatesApi.create_candidate_access_token ...'
      end
      # verify the required parameter 'existing_candidate_request' is set
      if @api_client.config.client_side_validation && existing_candidate_request.nil?
        fail ArgumentError, "Missing the required parameter 'existing_candidate_request' when calling CandidatesApi.create_candidate_access_token"
      end
      # resource path
      local_var_path = '/api/candidates/access_tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(existing_candidate_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"CandidatesApi.create_candidate_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CandidatesApi#create_candidate_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a matchback operation, returning the match candidate id.
    # Attempts to matchback against a known candidate and returns the candidate id.
    # @param existing_candidate_request [ExistingCandidateRequest] Candidate details to matchback.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def matchback_candidate(existing_candidate_request, opts = {})
      matchback_candidate_with_http_info(existing_candidate_request, opts)
      nil
    end

    # Perform a matchback operation, returning the match candidate id.
    # Attempts to matchback against a known candidate and returns the candidate id.
    # @param existing_candidate_request [ExistingCandidateRequest] Candidate details to matchback.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def matchback_candidate_with_http_info(existing_candidate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CandidatesApi.matchback_candidate ...'
      end
      # verify the required parameter 'existing_candidate_request' is set
      if @api_client.config.client_side_validation && existing_candidate_request.nil?
        fail ArgumentError, "Missing the required parameter 'existing_candidate_request' when calling CandidatesApi.matchback_candidate"
      end
      # resource path
      local_var_path = '/api/candidates/matchback'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(existing_candidate_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"CandidatesApi.matchback_candidate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CandidatesApi#matchback_candidate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
