=begin
#Get into Teaching API - V1

#                             Provides a RESTful API for integrating with the Get into Teaching CRM.                             The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).                             The GIT API aims to provide:                             * Simple, task-based RESTful APIs.                             * Message queueing (while the GIT CRM is offline for updates).                             * Validation to ensure consistency across services writing to the GIT CRM.                         

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module GetIntoTeachingApiClient
  class PickListItemsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves the list of candidate adviser eligibilities.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_adviser_eligibilities(opts = {})
      data, _status_code, _headers = get_candidate_adviser_eligibilities_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate adviser eligibilities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_adviser_eligibilities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_adviser_eligibilities ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/adviser_eligibilities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_adviser_eligibilities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_adviser_eligibilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate adviser requirements.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_adviser_requirements(opts = {})
      data, _status_code, _headers = get_candidate_adviser_requirements_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate adviser requirements.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_adviser_requirements_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_adviser_requirements ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/adviser_requirements'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_adviser_requirements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_adviser_requirements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate assignment status.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_assignment_status(opts = {})
      data, _status_code, _headers = get_candidate_assignment_status_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate assignment status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_assignment_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_assignment_status ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/assignment_status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_assignment_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_assignment_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_channels(opts = {})
      data, _status_code, _headers = get_candidate_channels_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_channels ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of citizenship options.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_citizenship(opts = {})
      data, _status_code, _headers = get_candidate_citizenship_with_http_info(opts)
      data
    end

    # Retrieves the list of citizenship options.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_citizenship_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_citizenship ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/citizenships'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_citizenship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_citizenship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate event subscription channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_event_subscription_channels(opts = {})
      data, _status_code, _headers = get_candidate_event_subscription_channels_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate event subscription channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_event_subscription_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_event_subscription_channels ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/event_subscription_channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_event_subscription_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_event_subscription_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate GCSE status.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_gcse_status(opts = {})
      data, _status_code, _headers = get_candidate_gcse_status_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate GCSE status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_gcse_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_gcse_status ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/gcse_status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_gcse_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_gcse_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of has qualified teacher statuses (QTS) options.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_has_qualified_teacher_statuses(opts = {})
      data, _status_code, _headers = get_candidate_has_qualified_teacher_statuses_with_http_info(opts)
      data
    end

    # Retrieves the list of has qualified teacher statuses (QTS) options.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_has_qualified_teacher_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_has_qualified_teacher_statuses ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/has_qualified_teacher_statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_has_qualified_teacher_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_has_qualified_teacher_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate initial teacher training years.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_initial_teacher_training_years(opts = {})
      data, _status_code, _headers = get_candidate_initial_teacher_training_years_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate initial teacher training years.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_initial_teacher_training_years_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_initial_teacher_training_years ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/initial_teacher_training_years'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_initial_teacher_training_years",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_initial_teacher_training_years\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate consideration journey stages.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_journey_stages(opts = {})
      data, _status_code, _headers = get_candidate_journey_stages_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate consideration journey stages.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_journey_stages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_journey_stages ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/consideration_journey_stages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_journey_stages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_journey_stages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of location options.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_location(opts = {})
      data, _status_code, _headers = get_candidate_location_with_http_info(opts)
      data
    end

    # Retrieves the list of location options.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_location_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_location ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/locations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate mailing list subscription channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_mailing_list_subscription_channels(opts = {})
      data, _status_code, _headers = get_candidate_mailing_list_subscription_channels_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate mailing list subscription channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_mailing_list_subscription_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_mailing_list_subscription_channels ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/mailing_list_subscription_channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_mailing_list_subscription_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_mailing_list_subscription_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate preferred education phases.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_preferred_education_phases(opts = {})
      data, _status_code, _headers = get_candidate_preferred_education_phases_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate preferred education phases.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_preferred_education_phases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_preferred_education_phases ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/preferred_education_phases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_preferred_education_phases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_preferred_education_phases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate retake GCSE status.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_retake_gcse_status(opts = {})
      data, _status_code, _headers = get_candidate_retake_gcse_status_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate retake GCSE status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_retake_gcse_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_retake_gcse_status ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/retake_gcse_status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_retake_gcse_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_retake_gcse_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of situations.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_situations(opts = {})
      data, _status_code, _headers = get_candidate_situations_with_http_info(opts)
      data
    end

    # Retrieves the list of situations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_situations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_situations ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/situations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_situations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_situations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate teacher training adviser subscription channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_teacher_training_adviser_subscription_channels(opts = {})
      data, _status_code, _headers = get_candidate_teacher_training_adviser_subscription_channels_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate teacher training adviser subscription channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_teacher_training_adviser_subscription_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_teacher_training_adviser_subscription_channels ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/teacher_training_adviser_subscription_channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_teacher_training_adviser_subscription_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_teacher_training_adviser_subscription_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of candidate types.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_types(opts = {})
      data, _status_code, _headers = get_candidate_types_with_http_info(opts)
      data
    end

    # Retrieves the list of candidate types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_types ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of visa status options.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_candidate_visa_status(opts = {})
      data, _status_code, _headers = get_candidate_visa_status_with_http_info(opts)
      data
    end

    # Retrieves the list of visa status options.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_candidate_visa_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_candidate_visa_status ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/candidate/visa_statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_candidate_visa_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_candidate_visa_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of contact creation channel activities.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_contact_creation_channel_activities(opts = {})
      data, _status_code, _headers = get_contact_creation_channel_activities_with_http_info(opts)
      data
    end

    # Retrieves the list of contact creation channel activities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_contact_creation_channel_activities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_contact_creation_channel_activities ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/contact_creation_channel/activities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_contact_creation_channel_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_contact_creation_channel_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of contact creation channel services.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_contact_creation_channel_services(opts = {})
      data, _status_code, _headers = get_contact_creation_channel_services_with_http_info(opts)
      data
    end

    # Retrieves the list of contact creation channel services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_contact_creation_channel_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_contact_creation_channel_services ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/contact_creation_channel/services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_contact_creation_channel_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_contact_creation_channel_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of contact creation channel sources.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_contact_creation_channel_sources(opts = {})
      data, _status_code, _headers = get_contact_creation_channel_sources_with_http_info(opts)
      data
    end

    # Retrieves the list of contact creation channel sources.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_contact_creation_channel_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_contact_creation_channel_sources ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/contact_creation_channel/sources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_contact_creation_channel_sources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_contact_creation_channel_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of past teaching position education phases.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_past_teaching_position_education_phases(opts = {})
      data, _status_code, _headers = get_past_teaching_position_education_phases_with_http_info(opts)
      data
    end

    # Retrieves the list of past teaching position education phases.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_past_teaching_position_education_phases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_past_teaching_position_education_phases ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/past_teaching_position/education_phases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_past_teaching_position_education_phases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_past_teaching_position_education_phases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of phone call channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_phone_call_channels(opts = {})
      data, _status_code, _headers = get_phone_call_channels_with_http_info(opts)
      data
    end

    # Retrieves the list of phone call channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_phone_call_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_phone_call_channels ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/phone_call/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_phone_call_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_phone_call_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of qualification degree status.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_qualification_degree_status(opts = {})
      data, _status_code, _headers = get_qualification_degree_status_with_http_info(opts)
      data
    end

    # Retrieves the list of qualification degree status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_qualification_degree_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_qualification_degree_status ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/qualification/degree_status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_qualification_degree_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_qualification_degree_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of qualification types.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_qualification_types(opts = {})
      data, _status_code, _headers = get_qualification_types_with_http_info(opts)
      data
    end

    # Retrieves the list of qualification types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_qualification_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_qualification_types ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/qualification/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_qualification_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_qualification_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of qualification UK degree grades.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_qualification_uk_degree_grades(opts = {})
      data, _status_code, _headers = get_qualification_uk_degree_grades_with_http_info(opts)
      data
    end

    # Retrieves the list of qualification UK degree grades.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_qualification_uk_degree_grades_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_qualification_uk_degree_grades ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/qualification/uk_degree_grades'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_qualification_uk_degree_grades",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_qualification_uk_degree_grades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of subscription types.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_subscription_types(opts = {})
      data, _status_code, _headers = get_subscription_types_with_http_info(opts)
      data
    end

    # Retrieves the list of subscription types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_subscription_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_subscription_types ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/service_subscription/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_subscription_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_subscription_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of teaching event accessibility statuses.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_teaching_event_accessibilty(opts = {})
      data, _status_code, _headers = get_teaching_event_accessibilty_with_http_info(opts)
      data
    end

    # Retrieves the list of teaching event accessibility statuses.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_teaching_event_accessibilty_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_teaching_event_accessibilty ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/teaching_event/accessibility_items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_teaching_event_accessibilty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_teaching_event_accessibilty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of teaching event regions.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_teaching_event_regions(opts = {})
      data, _status_code, _headers = get_teaching_event_regions_with_http_info(opts)
      data
    end

    # Retrieves the list of teaching event regions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_teaching_event_regions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_teaching_event_regions ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/teaching_event/regions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_teaching_event_regions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_teaching_event_regions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of teaching event registration channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_teaching_event_registration_channels(opts = {})
      data, _status_code, _headers = get_teaching_event_registration_channels_with_http_info(opts)
      data
    end

    # Retrieves the list of teaching event registration channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_teaching_event_registration_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_teaching_event_registration_channels ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/teaching_event_registration/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_teaching_event_registration_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_teaching_event_registration_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of teaching event status.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_teaching_event_status(opts = {})
      data, _status_code, _headers = get_teaching_event_status_with_http_info(opts)
      data
    end

    # Retrieves the list of teaching event status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_teaching_event_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_teaching_event_status ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/teaching_event/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_teaching_event_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_teaching_event_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the list of teaching event types.
    # @param [Hash] opts the optional parameters
    # @return [Array<PickListItem>]
    def get_teaching_event_types(opts = {})
      data, _status_code, _headers = get_teaching_event_types_with_http_info(opts)
      data
    end

    # Retrieves the list of teaching event types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PickListItem>, Integer, Hash)>] Array<PickListItem> data, response status code and response headers
    def get_teaching_event_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickListItemsApi.get_teaching_event_types ...'
      end
      # resource path
      local_var_path = '/api/pick_list_items/teaching_event/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PickListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"PickListItemsApi.get_teaching_event_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickListItemsApi#get_teaching_event_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
