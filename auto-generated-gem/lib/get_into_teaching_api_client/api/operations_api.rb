=begin
#Get into Teaching API - V1

#  Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module GetIntoTeachingApiClient
  class OperationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generates the mapping information.
    # Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
    # @param [Hash] opts the optional parameters
    # @return [Array<MappingInfo>]
    def generate_mapping_info(opts = {})
      data, _status_code, _headers = generate_mapping_info_with_http_info(opts)
      data
    end

    # Generates the mapping information.
    # Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MappingInfo>, Fixnum, Hash)>] Array<MappingInfo> data, response status code and response headers
    def generate_mapping_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OperationsApi.generate_mapping_info ...'
      end
      # resource path
      local_var_path = '/api/operations/generate_mapping_info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MappingInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OperationsApi#generate_mapping_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Performs a health check.
    # @param [Hash] opts the optional parameters
    # @return [HealthCheckResponse]
    def health_check(opts = {})
      data, _status_code, _headers = health_check_with_http_info(opts)
      data
    end

    # Performs a health check.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HealthCheckResponse, Fixnum, Hash)>] HealthCheckResponse data, response status code and response headers
    def health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OperationsApi.health_check ...'
      end
      # resource path
      local_var_path = '/api/operations/health_check'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HealthCheckResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OperationsApi#health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Simulates a 500 error to test the Sentry integration.
    # @param [Hash] opts the optional parameters
    # @return [HealthCheckResponse]
    def simulate_error(opts = {})
      data, _status_code, _headers = simulate_error_with_http_info(opts)
      data
    end

    # Simulates a 500 error to test the Sentry integration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HealthCheckResponse, Fixnum, Hash)>] HealthCheckResponse data, response status code and response headers
    def simulate_error_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OperationsApi.simulate_error ...'
      end
      # resource path
      local_var_path = '/api/operations/simulate_error'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HealthCheckResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OperationsApi#simulate_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
